// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `get`, `new`
// These types are ignored because they are not used by any `pub` functions: `EventDetails`, `StateFieldAccessIter`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `iter`, `len`, `next_back`, `next`, `nth`, `size_hint`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PluginCallback>>
abstract class PluginCallback implements RustOpaqueInterface {
  void changeOnPrint({required FutureOr<void> Function(String) onPrint});

  void changeProcessEvent(
      {required FutureOr<void> Function(String, bool?) processEvent});

  void changeSendEvent(
      {required FutureOr<void> Function(String, int?) sendEvent});

  void changeStateFieldAccess(
      {required FutureOr<String> Function(StateFieldAccess) stateFieldAccess});

  static PluginCallback default_() =>
      RustLib.instance.api.crateApiPluginPluginCallbackDefault();
}

abstract class RustPlugin {
  Future<void> run();

  Future<EventResult> runEvent(
      {required String eventType,
      required String event,
      required String serverEvent,
      required int target});
}

class EventResult {
  final int target;
  final String? serverEvent;
  final Set<int>? needsUpdate;

  const EventResult({
    required this.target,
    this.serverEvent,
    this.needsUpdate,
  });

  @override
  int get hashCode =>
      target.hashCode ^ serverEvent.hashCode ^ needsUpdate.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EventResult &&
          runtimeType == other.runtimeType &&
          target == other.target &&
          serverEvent == other.serverEvent &&
          needsUpdate == other.needsUpdate;
}

enum StateFieldAccess {
  table,
  tableName,
  info,
  players,
  teamMembers,
  ;
}
